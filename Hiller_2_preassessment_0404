For each of the following provide 1.) a definition in complete sentences and 
2.) a specific ACTUAL code example from your game
= = = Integer = = =
Definition: Any number such as 1,2,3.... and so on.
Generally we can define integers to letters or full words (strings) by doing the following:
int a = 0;

This sets the letter a to the value 0 and that can be manipulated by other code.

An example piece of code from my game would be: 
int score = 0;

This piece of code is responsible for setting my starting score and then accepting any 
input to change it from other code in my game.

= = = Counter = = =
Definition: A counter is an integer that "counts" up or down.
Counters can be used to measure time (an obvious implementation) or to count how many times something has occured,
e.g. tracking score based on how many enemies killed or items collected.
A simple Counter can be shown below:
static int i = 0;
//Static int i is created here so the void below can use it and keep in mind i is an integer
public void countup(){
int i++;
//int i++ counts up forever. All it says here is to add 1 to i. We would have to call the void countup() of course to
//use the counter of course.
}


An example piece of code from my game would be:
for (int i = 0; i < entities.size(); i++) {
                Entity entity = (Entity) entities.get(i);
                entity.draw(g);
}
Entity is an image in my game or rather a list of images. What it is checking for is if my integer i is smaller 
than/less than the size of my entities on screen then it should increase by one until it is of equal size and 
when that occurs it will go ahead and put my entities on screen.

= = = Class = = =
Definition: A class is literally a placeholder/template for creating different objects in java. Objects have the
Definition(cont.): properties defined by their classes.
An example of a very simple class would be:
class library{

//all code for class in here....
}
An example piece of code from my game would be:
static class Hero extends Rectangle{
//All code for it here
}


= = = Object = = =
Definition: Objects are very similar to real world objects such as say a lamp. A lamp only has two states: on and off
and nothing else. Objects are similar in this way, they are an actual tangible thing within java and they hold various
variables within them. Objects are classes with all variables assigned and all potential things you might need for
your object created in the class.

An example piece of code from my game would be:
static class Hero extends Rectangle{
    	int health = 50;
    	int TheScore = 0;
   	 
    	public Hero(int x, int y){
        	this.setX(x);
        	this.setY(y);
        	this.setHeight(15);
        	this.setWidth(15);
        	this.setFill(Color.DARKGOLDENROD);
      	 
     	 
    	}
   	 
    	public void setTheScore(int i){
        	this.TheScore = i;
    	}
   	 
    	public int getTheScore(){
        	return this.TheScore;
    	}
   	 
}

= = = Instance = = =
Definition: It is the relationship between say value X which is an instance of value Y. Where X is what is created and Y
holds all the variables/values for instance X to use. Often instances are synonymous with object.

An example piece of code from my game would be:
Base on my understanding this is an "instance",
static class laser extends Rectangle{
    	int movespeed = 200;
    	boolean hit = false;
    	int score = 0;
   	 
    	public laser(int x, int y){
        	this.setX(x);
        	this.setY(y);
        	this.setHeight(5);
        	this.setWidth(5);
        	this.setFill(Color.RED);
       	 

    	}
}

= = = ArrayList = = =
Definition: It is a list of objects that are created in a class with values set by the arraylist. Often arraylists are used
to call objects multiple times to create several instances of them so one doesn't have to code multiple classes to show
the exact same thing and instead put it into an arraylist which lightens work loads.

An example piece of code from my game would be:
static ArrayList<BadBlock> badblockz = new ArrayList();
That creates a new arraylist assigning the class badblock into an array named badblockz.
The associated class:
class BadBlock extends Rectangle{
    	boolean movedown = true;
   	 
    	public BadBlock(int x, int y){
        	this.setX(x);
        	this.setY(y);
        	this.setWidth(15);
        	this.setHeight(15);
        	this.setFill(Color.BISQUE);
    	}
}


= = = Declaration = = =
Definition: Declaration pretty much say that something exists. They don't create any values for that thing or anything that
might define the class. They just say that it was created and exists.

An example piece of code from my game would be:
static Hero fighter;
This just declares that Hero fighter exists.

= = = Initialization = = =
Definition: Things that cause some code to be executed when an object is created. Often initializers aer set to a value like 
an integer.

An example piece of code from my game would be:
rect = new Rectangle(150, 50, 25, 25);
When rect is creaetd it is given the values 150, 50, 25, 25 by the initializer.

= = = Boolean = = =
Definition: Something that sets a value to true or false which can be checked for later in the code.

An example piece of code from my game would be:
boolean movedown = true;
movedown gets set to true. Notice how boolean is ahead of movedown which says that movedown is a boolean piece of code.
= = = For loop = = =
Definition: A for loop deals with iteration which constantly loops based on integers or other variables and can be used to 
count up or down and to stop counting when a certain integer value is attained by the loop.

An example piece of code from my game would be:
for (Rectangle badblock : badblockz) {
        	if (fighter.getBoundsInParent().intersects(badblock.getBoundsInParent())) {
            	collisionDetected = true;
            	TheScore += .05;
            	badblock.setFill(Color.RED);
            	scoredisplay.setText("Score" + (int)TheScore);
        	}
}

This for loop checks the array badblockz for collision which will determine score and color of badblock.
